[{"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\index.js":"1","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\App.js":"2","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\MainComponent.js":"3","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HomeComponent.js":"4","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HeaderComponent.js":"5","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\CertificatesComponent.js":"6","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\AboutComponent.js":"7","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\GamesComponent.js":"8"},{"size":484,"mtime":1634615930379,"results":"9","hashOfConfig":"10"},{"size":273,"mtime":1634756536414,"results":"11","hashOfConfig":"10"},{"size":1159,"mtime":1638694803933,"results":"12","hashOfConfig":"10"},{"size":451,"mtime":1637437094209,"results":"13","hashOfConfig":"10"},{"size":12389,"mtime":1636139109838,"results":"14","hashOfConfig":"10"},{"size":1675,"mtime":1634844456509,"results":"15","hashOfConfig":"10"},{"size":2615,"mtime":1634843562272,"results":"16","hashOfConfig":"10"},{"size":6489,"mtime":1638695559480,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3jwhp1",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\index.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\App.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\MainComponent.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HomeComponent.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HeaderComponent.js",["36"],"import React, { Component } from \"react\";\r\nimport {\r\n  Nav,\r\n  NavbarToggler,\r\n  Collapse,\r\n  NavItem,\r\n  Navbar,\r\n  NavbarBrand,\r\n  Jumbotron,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Alert } from \"bootstrap\";\r\n// import LoginComponent from \"./loginModalComponent\";\r\nimport axios from \"axios\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isNavOpen: false,\r\n      isLoginOpen: false,\r\n      isRegisterOpen: false,\r\n      username: \"\",\r\n      password: \"\",\r\n      isLogged: false,\r\n      accounts: [],\r\n    };\r\n    this.toggleNav = this.toggleNav.bind(this);\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.toggleRegister = this.toggleRegister.bind(this);\r\n  }\r\n  login(data) {\r\n    this.setState({ username: data });\r\n    this.setState({ isLogged: true });\r\n  }\r\n\r\n  toggleNav() {\r\n    this.setState({ isNavOpen: !this.state.isNavOpen });\r\n  }\r\n  toggleModal() {\r\n    this.setState({ isLoginOpen: !this.state.isLoginOpen });\r\n  }\r\n  toggleRegister() {\r\n    this.setState({ isLoginOpen: false });\r\n    this.setState({ isRegisterOpen: !this.state.isRegisterOpen });\r\n  }\r\n  handleSubmit = (e) => {\r\n    this.toggleModal();\r\n    e.preventDefault();\r\n\r\n    let data = new FormData(e.target);\r\n    let userLogin = {\r\n      username: data.get(\"username\"),\r\n      password: data.get(\"password\"),\r\n    };\r\n    axios\r\n      .post(\"/accounts/login\", {\r\n        username: userLogin.username,\r\n        password: userLogin.password,\r\n      })\r\n      .then((data) => {\r\n        this.login(data.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  handleRegister = (e) => {\r\n    this.toggleRegister();\r\n    e.preventDefault();\r\n    let data = new FormData(e.target);\r\n    let newUser = {\r\n      username: data.get(\"username\"),\r\n      password: data.get(\"password\"),\r\n    };\r\n    let postOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        username: newUser.username,\r\n        password: newUser.password,\r\n      }),\r\n    };\r\n    fetch(\"/accounts/register\", postOptions).then((response) => {\r\n      console.log(response);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLogged === false) {\r\n      return (\r\n        <div className=\"header-container\">\r\n          <Jumbotron fluid>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h1>Will work for coffee</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Jumbotron>\r\n          <Navbar dark sticky=\"top\" expand=\"md\">\r\n            <NavbarBrand></NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNav} />\r\n            <Collapse isOpen={this.state.isNavOpen} navbar>\r\n              <Nav className=\"col\" navbar>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/home\">\r\n                    Home\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/certificates\">\r\n                    Certificates\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/games\">\r\n                    Games\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/about\">\r\n                    About Me\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n              <Button onClick={this.toggleModal}>Login</Button>\r\n            </Collapse>\r\n          </Navbar>\r\n\r\n          <Modal isOpen={this.state.isLoginOpen} toggle={this.toggleModal}>\r\n            <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button value=\"submit\" type=\"submit\">\r\n                    Login\r\n                  </Button>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button onClick={this.toggleRegister}>Register</Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n\r\n          <Modal\r\n            isOpen={this.state.isRegisterOpen}\r\n            toggle={this.toggleRegister}>\r\n            <ModalHeader toggle={this.toggleRegister}>Register</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleRegister}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup></FormGroup>\r\n                <FormGroup>\r\n                  <Button type=\"submit\" value=\"submit\">\r\n                    Register\r\n                  </Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    } else {\r\n      //IS LOGGED STARTS HERE\r\n      return (\r\n        <div className=\"header-container\">\r\n          <Jumbotron fluid>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h1>Oh god what do you title a page like this?</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Jumbotron>\r\n          <Navbar dark sticky=\"top\" expand=\"md\">\r\n            <NavbarBrand></NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNav} />\r\n            <Collapse isOpen={this.state.isNavOpen} navbar>\r\n              <Nav className=\"col\" navbar>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/home\">\r\n                    Home\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/certificates\">\r\n                    Certificates\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/projects\">\r\n                    Projects\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/about\">\r\n                    About Me\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/contact\">\r\n                    Contact Me\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n              Welcome {this.state.username}\r\n              <Button onClick={this.logout}>Log Out</Button>\r\n            </Collapse>\r\n          </Navbar>\r\n\r\n          <Modal isOpen={this.state.isLoginOpen} toggle={this.toggleModal}>\r\n            <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button value=\"submit\" type=\"submit\">\r\n                    Login\r\n                  </Button>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button onClick={this.toggleRegister}>Register</Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n\r\n          <Modal\r\n            isOpen={this.state.isRegisterOpen}\r\n            toggle={this.toggleRegister}>\r\n            <ModalHeader toggle={this.toggleRegister}>Register</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleRegister}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup></FormGroup>\r\n                <FormGroup>\r\n                  <Button type=\"submit\" value=\"submit\">\r\n                    Register\r\n                  </Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\CertificatesComponent.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\AboutComponent.js",["37"],"import React, { Component } from \"react\";\r\nimport { Card, CardImg, CardOverlay, CardTitle } from \"reactstrap\";\r\nimport CardBody from \"reactstrap/lib/CardBody\";\r\n\r\nexport default class About extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"content\">\r\n          Hi, I'm Jared. I consume coffee in irresponsible quantities and I like\r\n          coding.\r\n          <br />\r\n          <br />\r\n          I'm currently studying full-stack development at{\" \"}\r\n          <a href=\"https://nucamp.co\">Nucamp</a>, a hybrid part-time coding\r\n          bootcamp.\r\n          <br /> <br />\r\n          I'm building this site and using it to practice what I learn and\r\n          display my progress. If you're here and you don't know me, you've\r\n          clearly made some poor decisions in life and I would recommend calmly\r\n          backing away and forgetting anything and everything you see here.\r\n          Unless you're either hiring or wish to provide me with coffee. In\r\n          which case, let's chat. \r\n          <br /> <br />\r\n          If you'd like to reach out and connect, the\r\n          most convenient way is through my{\" \"}\r\n          <a\r\n            href=\"https://www.linkedin.com/in/jared-ekenstam-777348208/\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\">\r\n            LinkedIn profile\r\n          </a>\r\n          .\r\n        </div>\r\n        <br />\r\n        <div className=\"content\">\r\n          This space is to display ongoing personal projects.\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"col-4\">\r\n            <Card>\r\n              <CardImg width=\"100%\" src=\"logo192.png\" />\r\n              <CardTitle className=\"text-center border-bottom border-top\">\r\n                Game Server Console\r\n              </CardTitle>\r\n              <CardBody>\r\n                Flask Router that handles web requests to manage various game\r\n                servers. A live demonstration of this is available in the Games\r\n                section of this site. (WIP, rebuilding this!)\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <Card>\r\n              <CardImg width=\"100%\" src=\"logo192.png\" />\r\n              <CardTitle>Project</CardTitle>\r\n            </Card>\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <Card>\r\n              <CardImg width=\"100%\" src=\"logo192.png\" />\r\n              <CardTitle>Project</CardTitle>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\GamesComponent.js",["38"],{"ruleId":"39","severity":1,"message":"40","line":20,"column":10,"nodeType":"41","messageId":"42","endLine":20,"endColumn":15},{"ruleId":"39","severity":1,"message":"43","line":2,"column":25,"nodeType":"41","messageId":"42","endLine":2,"endColumn":36},{"ruleId":"39","severity":1,"message":"44","line":4,"column":10,"nodeType":"41","messageId":"42","endLine":4,"endColumn":14},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'CardOverlay' is defined but never used.","'data' is defined but never used."]