[{"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\index.js":"1","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\App.js":"2","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\MainComponent.js":"3","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HomeComponent.js":"4","C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HeaderComponent.js":"5"},{"size":484,"mtime":1634615930379,"results":"6","hashOfConfig":"7"},{"size":304,"mtime":1634670791917,"results":"8","hashOfConfig":"7"},{"size":597,"mtime":1634671721053,"results":"9","hashOfConfig":"7"},{"size":479,"mtime":1634616058265,"results":"10","hashOfConfig":"7"},{"size":13238,"mtime":1634671668954,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3jwhp1",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\index.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\App.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\MainComponent.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HomeComponent.js",[],"C:\\Users\\jared\\OneDrive\\Desktop\\personalsite\\caramellatte-dev\\src\\components\\HeaderComponent.js",["23"],"import React, { Component } from \"react\";\r\nimport {\r\n  Nav,\r\n  NavbarToggler,\r\n  Collapse,\r\n  NavItem,\r\n  Navbar,\r\n  NavbarBrand,\r\n  Jumbotron,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Alert } from \"bootstrap\";\r\n// import LoginComponent from \"./loginModalComponent\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isNavOpen: false,\r\n      isLoginOpen: false,\r\n      isRegisterOpen: false,\r\n      username: \"\",\r\n      password: \"\",\r\n      isLogged: false,\r\n      accounts: [],\r\n    };\r\n    this.toggleNav = this.toggleNav.bind(this);\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.toggleRegister = this.toggleRegister.bind(this);\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   this.getAccounts();\r\n  // }\r\n\r\n  toggleNav() {\r\n    this.setState({ isNavOpen: !this.state.isNavOpen });\r\n  }\r\n  toggleModal() {\r\n    this.setState({ isLoginOpen: !this.state.isLoginOpen });\r\n  }\r\n  toggleRegister() {\r\n    this.setState({ isLoginOpen: false });\r\n    this.setState({ isRegisterOpen: !this.state.isRegisterOpen });\r\n  }\r\n  handleSubmit = (e) => {\r\n    this.toggleModal();\r\n    e.preventDefault();\r\n\r\n    // let data = new FormData(e.target);\r\n    // let accMatch = this.state.accounts.map((acc) => {\r\n    //   if (\r\n    //     data.get(\"username\") === acc.username &&\r\n    //     data.get(\"password\") === acc.password\r\n    //   ) {\r\n    //     console.log(\"success\");\r\n    //     this.setState({ username: acc.username });\r\n    //     this.setState({ isLogged: true });\r\n    //   }\r\n    // });\r\n  };\r\n\r\n  // handleRegister = (e) => {\r\n  //   this.toggleRegister();\r\n  //   e.preventDefault();\r\n  //   let data = new FormData(e.target);\r\n  //   let newUser = {\r\n  //     username: data.get(\"username\"),\r\n  //     password: data.get(\"password\"),\r\n  //   };\r\n  //   let postOptions = {\r\n  //     method: \"POST\",\r\n  //     headers: { \"Content-Type\": \"application/json\" },\r\n  //     body: JSON.stringify({\r\n  //       username: newUser.username,\r\n  //       password: newUser.password,\r\n  //     }),\r\n  //   };\r\n  //   fetch(url + \"accounts\", postOptions).then((response) => {\r\n  //     response.json();\r\n  //   });\r\n  //   this.getAccounts();\r\n  // };\r\n\r\n  //get accounts\r\n  // getAccounts = () => {\r\n  //   const pull = {\r\n  //     method: \"GET\",\r\n  //     headers: { \"Content-Type\": \"application/json\" },\r\n  //   };\r\n\r\n  //   fetch(url + \"accounts\", pull)\r\n  //     .then((response) => response.json())\r\n  //     .then((data) => {\r\n  //       this.setState({ accounts: data });\r\n  //     });\r\n  // };\r\n  // logout = () => {\r\n  //   console.log(\"logging out\");\r\n  //   this.setState({ isLogged: false });\r\n  // };\r\n\r\n  render() {\r\n    if (this.state.isLogged === false) {\r\n      return (\r\n        <div className=\"header-container\">\r\n          <Jumbotron fluid>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h1>Oh god what do you title a page like this?</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Jumbotron>\r\n          <Navbar dark sticky=\"top\" expand=\"md\">\r\n            <NavbarBrand></NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNav} />\r\n            <Collapse isOpen={this.state.isNavOpen} navbar>\r\n              <Nav className=\"col\" navbar>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/home\">\r\n                    Home\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/certificates\">\r\n                    Certificates\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/projects\">\r\n                    Projects\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/games\">\r\n                    Games\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/about\">\r\n                    About Me\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/contact\">\r\n                    Contact Me\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n              <Button onClick={this.toggleModal}>Login</Button>\r\n            </Collapse>\r\n          </Navbar>\r\n\r\n          <Modal isOpen={this.state.isLoginOpen} toggle={this.toggleModal}>\r\n            <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button value=\"submit\" type=\"submit\">\r\n                    Login\r\n                  </Button>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button onClick={this.toggleRegister}>Register</Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n\r\n          <Modal\r\n            isOpen={this.state.isRegisterOpen}\r\n            toggle={this.toggleRegister}>\r\n            <ModalHeader toggle={this.toggleRegister}>Register</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleRegister}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup></FormGroup>\r\n                <FormGroup>\r\n                  <Button type=\"submit\" value=\"submit\">\r\n                    Register\r\n                  </Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    } else {\r\n      //IS NOT LOGGED STARTS HERE\r\n      return (\r\n        <div className=\"header-container\">\r\n          <Jumbotron fluid>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <h1>Oh god what do you title a page like this?</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Jumbotron>\r\n          <Navbar dark sticky=\"top\" expand=\"md\">\r\n            <NavbarBrand></NavbarBrand>\r\n            <NavbarToggler onClick={this.toggleNav} />\r\n            <Collapse isOpen={this.state.isNavOpen} navbar>\r\n              <Nav className=\"col\" navbar>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/home\">\r\n                    Home\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/certificates\">\r\n                    Certificates\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/projects\">\r\n                    Projects\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/about\">\r\n                    About Me\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink className=\"nav-link\" to=\"/contact\">\r\n                    Contact Me\r\n                  </NavLink>\r\n                </NavItem>\r\n                Welcome {this.state.username}\r\n              </Nav>\r\n              <Button onClick={this.logout}>Log Out</Button>\r\n            </Collapse>\r\n          </Navbar>\r\n\r\n          <Modal isOpen={this.state.isLoginOpen} toggle={this.toggleModal}>\r\n            <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button value=\"submit\" type=\"submit\">\r\n                    Login\r\n                  </Button>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Button onClick={this.toggleRegister}>Register</Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n\r\n          <Modal\r\n            isOpen={this.state.isRegisterOpen}\r\n            toggle={this.toggleRegister}>\r\n            <ModalHeader toggle={this.toggleRegister}>Register</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={this.handleRegister}>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"username\">Username</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    innerRef={(input) => (this.username = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    handleRef={(input) => (this.password = input)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check htmlFor=\"remember\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      id=\"remember\"\r\n                      name=\"remember\"\r\n                      handleRef={(input) => (this.remember = input)}\r\n                    />\r\n                    Remember Me\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup></FormGroup>\r\n                <FormGroup>\r\n                  <Button type=\"submit\" value=\"submit\">\r\n                    Register\r\n                  </Button>\r\n                </FormGroup>\r\n              </Form>\r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Header;\r\n",{"ruleId":"24","severity":1,"message":"25","line":20,"column":10,"nodeType":"26","messageId":"27","endLine":20,"endColumn":15},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar"]